package com.example.cubetime.utils

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.content.Intent
import androidx.core.content.ContextCompat.getSystemService
import com.example.cubetime.data.model.Solve
import com.example.cubetime.data.model.StatType

class ShareAndCopy() {
    private fun shareString(string: String, context: Context) {
        val intent = Intent().apply {
            action = Intent.ACTION_SEND
            putExtra(Intent.EXTRA_TEXT, string)
            type = "text/plain"
        }
        context.startActivity(intent)
    }


    private fun copyString (context: Context, text: String) {
        val clipboardManager = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
        val clip: ClipData = ClipData.newPlainText("toCopy", text)
        clipboardManager.setPrimaryClip(clip)
    }


    fun shareSolve(solve: Solve, includeScrambles: Boolean = true, context: Context) {
        shareString(solveToShareString(solve, includeScrambles), context)
    }

    fun shareAverage (
        solves: List<Solve>,
        includeScrambles: Boolean = true,
        context: Context,
        statType: StatType,
        avgResult: String,
        ) {
        shareString(avgToShareString(solves, statType, avgResult, includeScrambles), context)
    }


    fun copyAverage(
        solves: List<Solve>,
        statType: StatType,
        avgResult: String,
        includeScrambles: Boolean,
        context: Context
    ) {
        copyString(context, avgToShareString(solves, statType, avgResult, includeScrambles))
    }



    private fun solveToShareString(solve: Solve, includeScrambles: Boolean): String {
        val time = TimeFormat.millisToString(
            millis = solve.result,
            penalty = solve.penalties
        )
        var result = ""
        result += "Generated by CubeRush on ${solve.date}\n"
        result += "single: $time"
        result += "\n\nTime List:\n"
        if (includeScrambles) { result += "1. " }
        result += time
        if (includeScrambles) { result += "   ${solve.scramble}" }
        return result
    }


    private fun avgToShareString(
        solves: List<Solve>,
        statType: StatType,
        avgResult: String,
        includeScrambles: Boolean
    )
    : String {
        val solveStrings = TimeFormat.solveListToStringAverageList(solves, statType)
        val averageName = statType.getName().lowercase()
        var result = ""
        result += "Generated by CubeRush on ${solves[0].date}\n"
        result += "$averageName: $avgResult"
        result += "\n\nTime List:\n"
        solveStrings.forEachIndexed { index, solve ->
            val solveResult = solve.second
            if (includeScrambles) {
                result += (index+1).toString()
                result += ". $solveResult"
                result += "   ${solves[index].scramble}"
                if (index != solveStrings.lastIndex) { result += "\n"}
            } else {
                result += solveResult
                if (index != solveStrings.lastIndex) { result += ", "}
            }
        }
        return result
    }

}